package com.spritechase.ui{	import flash.events.Event;	import flash.display.MovieClip;	import flash.display.DisplayObject;	import flash.events.MouseEvent;	import flash.utils.Timer;	import flash.events.TimerEvent;		import com.spritechase.core.*;		import com.greensock.TweenLite;		public class KioskUI extends MovieClip	{		//Stage members		public var screens_mc:MovieClip;		public var play_btn:PlayButton;		public var title_mc:UITitle;		public var indicator_mc:MovieClip;				//Private members		private var data:KioskData;		private var idleTimer:Timer;		private var initTimer:Timer;		private var screenIndex:int = 0;		private var screenCt:int = 0;		private var debug:Boolean = true;				public function KioskUI()		{			addEventListener(Event.ADDED_TO_STAGE, onAddedToStage, false, 0, true);			trace("KioskUI()");		}				private function onAddedToStage(e:Event):void		{			removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);						//$$testme set up the idle timer			idleTimer = new Timer(60000, 1);			idleTimer.addEventListener(TimerEvent.TIMER_COMPLETE, onIdleTimer);						//$$testme set up the screen rotation logic			screenCt = screens_mc.numChildren;						//$$testme set up init timer to sidestep ridiculous event logic of AS3 FP10+			initTimer = new Timer(1000, 1);			initTimer.addEventListener(TimerEvent.TIMER_COMPLETE, onInitTimer);			initTimer.start();		}				private function onInitTimer(e:TimerEvent):void		{			initTimer.stop();			initTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, onInitTimer);			init(null);		}				public function init(newData:KioskData):void		{			trace('KioskUI.init()');						if(debug && newData == null)			{				trace('+++ debug == true and newData == null.  Passing in debug KioskData.');				newData = new KioskData(				<xml>					<section id="video">						<model id="coke_mentos" />						<model id="cigar_box_guitar" />					</section>					<section id="user">						<name>Boinky Bot</name>						<parts>22</parts>						<projects>2</projects>					</section>					<section id="team">						<name>Razzle Dazzle</name>						<parts>41</parts>						<projects>4</projects>					</section>					<section id="map">						<point x="100" y="100" label="Fabric" />						<point x="100" y="200" label="PVC Pipe" />					</section>				</xml>)			}						trace('KioskUI.init().  Data: ' + newData.data.toXMLString());			data = newData;						//$$testme iterate over all screens and update their data from the kiosk data object			for(var i:int = 0; i < screens_mc.numChildren; i++)			{				var child:DisplayObject = screens_mc.getChildAt(i);				if(child is UIScreen) UIScreen(child).update(data);			}						//$$testme bind event listeners on play button to invoke changeScreen			play_btn.addEventListener(MouseEvent.CLICK, nextScreen);			play_btn.enabled = true;						addEventListener(MouseEvent.MOUSE_MOVE, resetIdleTimer);						//$$testme start inactivity timer; if it elapses, call idle			idleTimer.start();		}				public function nextScreen(e:MouseEvent = null):void		{			trace('nextScreen()');			screenIndex++;						//$$testme reset to 1 to avoid the idle screen (at index 0)			if(screenIndex == screenCt) screenIndex = 1;						//get the current UI screen's info			var target:MovieClip = MovieClip(screens_mc.getChildAt(screenIndex));			var screenName:String = target.name.substr(0, -3);						//update title on main page			trace("Updating title for screen: " + screenName);			title_mc.update(screenName);						//update carousel indicator to reflect new position 			indicator_mc.gotoAndStop(screenName);						//tween screens			TweenLite.to(screens_mc, 0.5, {				x: -1 * target.x			});		}				private function resetIdleTimer(e:Event = null):void		{			idleTimer.reset();		}				private function onIdleTimer(e:TimerEvent):void		{			trace('onIdleTimer() called');			idleTimer.stop();			idle();		}				private function idle():void		{			trace('idle()');			//$$testme unbind all event handlers on the play button			play_btn.removeEventListener(MouseEvent.CLICK, nextScreen);			play_btn.enabled = false;			removeEventListener(MouseEvent.MOUSE_MOVE, resetIdleTimer);						//$$testme iterate over all screens and tell them to discard their user-specific data			for(var i:int = 0; i < screens_mc.numChildren; i++)			{				var child:DisplayObject = screens_mc.getChildAt(i);				if(child is UIScreen) UIScreen(child).idle();			}						//$$todo show idle overlay content			TweenLite.to(screens_mc, 0.5, {				x:0			});		}	}}